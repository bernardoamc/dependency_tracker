defmodule DependencyTracker.Javascript.PackageDefinition do
  alias DependencyTracker.Javascript.Parser
  alias DependencyTracker.Javascript.Package

  defstruct [orgs: %{}]

  @moduledoc """
  This module is responsible for handling a yarn.lock file metadata.
  """

  @doc """
    Creates a new PackageDefinition struct.

    Example:
      iex> DependencyTracker.Javascript.PackageDefinition.new()
      %DependencyTracker.Javascript.PackageDefinition{orgs: %{}}
  """
  def new() do
    struct(__MODULE__)
  end

  @doc """
  Given a yarn.lock block, parses it and returns a new PackageDefinition struct.

  It achieves this by parsing the block using NimbleParsec and then reducing
  the result into a struct containing a map of organizations as keys and Package
  structs as a list of values.

  Returns {:ok, PackageDefinition} or {:error, reason}
  """
  def parse_block(block) do
    case parse_string(block) do
      {:ok, package} -> {:ok, %__MODULE__{orgs: %{ package.org => [package] }}}
      {:error, reason} -> {:error, reason}
    end
  end

  @doc """
  Given the yarn.lock path, reads the file and returns a new PackageDefinition
  struct.

  It achieves this by splitting the file into blocks split on empty
  lines and passing each block to the parse_block/1 function. It then proceeds to
  output any errors that occur within a block and only returns the PackageDefinition
  struct with successfully parsed blocks.

  Returns {:ok, PackageDefinition} or {:error, reason}
  """
  def parse(path) do
    case File.read(path) do
      {:ok, contents} ->
        contents
        |> String.split("\n\n\n") # Drop autogenerated comment
        |> List.last()
        |> String.split("\n\n")
        |> Enum.reduce({:ok, %__MODULE__{orgs: %{}}}, fn block, {:ok, package_definition} ->
          case parse_string(block) do
            {:ok, package} ->
              {:ok, merge(package, package_definition)}
            {:error, reason} ->
              IO.puts("Error parsing yarn.lock block: #{reason}")
              {:ok, package_definition}
          end
        end)
      {:error, reason} -> {:error, reason}
    end
  end

  @doc """
  Given a PackageDefinition struct, returns a list of organizations.
  """
  def orgs(%__MODULE__{orgs: orgs}) do
    Map.keys(orgs)
  end

  @doc """
  Given a PackageDefinition struct and a organization, returns a list of all the packages
  belonging to that organization.

  Returns {:ok, packages} or {:error, reason}
  """
  def packages(%__MODULE__{orgs: orgs}, org) do
    case Map.fetch(orgs, org) do
      {:ok, packages} -> {:ok, packages}
      :error -> {:error, :organization_not_found}
    end
  end

  defp parse_string(content) do
    case Parser.parse(content) do
      {:ok, [package], "", _, _, _} -> {:ok, Package.new(package)}
      {:error, reason, _rest, _, _, _} -> {:error, reason}
    end
  end

  defp merge(%Package{ org: org } = package, %__MODULE__{orgs: orgs}) do
    packages = Map.get(orgs, org, [])
    %__MODULE__{orgs: Map.put(orgs, org, [package | packages])}
  end
end
